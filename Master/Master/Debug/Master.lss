
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  000008c4  00000958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000e6  008000e6  000009de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dd8  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b33  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001084  00000000  00000000  0000354f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  000045d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000699  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f35  00000000  00000000  00004fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005f1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_13>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	84 02       	muls	r24, r20
  56:	a5 02       	muls	r26, r21
  58:	c8 02       	muls	r28, r24
  5a:	ec 02       	muls	r30, r28
  5c:	0f 03       	fmul	r16, r23
  5e:	4d 03       	fmul	r20, r21
  60:	74 03       	mulsu	r23, r20
  62:	8e 03       	fmulsu	r16, r22
  64:	b2 03       	fmuls	r19, r18

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e4 ec       	ldi	r30, 0xC4	; 196
  7a:	f8 e0       	ldi	r31, 0x08	; 8
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	a6 3e       	cpi	r26, 0xE6	; 230
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	a6 ee       	ldi	r26, 0xE6	; 230
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ab 3e       	cpi	r26, 0xEB	; 235
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 78 02 	call	0x4f0	; 0x4f0 <main>
  9c:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <DIO_SetPin_Direction>:
		break;
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
		break;
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
  a4:	44 23       	and	r20, r20
  a6:	19 f0       	breq	.+6      	; 0xae <DIO_SetPin_Direction+0xa>
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	c9 f1       	breq	.+114    	; 0x11e <DIO_SetPin_Direction+0x7a>
  ac:	08 95       	ret
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	91 f0       	breq	.+36     	; 0xd6 <DIO_SetPin_Direction+0x32>
  b2:	28 f0       	brcs	.+10     	; 0xbe <DIO_SetPin_Direction+0x1a>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	d9 f0       	breq	.+54     	; 0xee <DIO_SetPin_Direction+0x4a>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	29 f1       	breq	.+74     	; 0x106 <DIO_SetPin_Direction+0x62>
  bc:	08 95       	ret
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_SetPin_Direction+0x26>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_SetPin_Direction+0x22>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
  d6:	27 b3       	in	r18, 0x17	; 23
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_SetPin_Direction+0x3e>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_SetPin_Direction+0x3a>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	87 bb       	out	0x17, r24	; 23
  ec:	08 95       	ret
  ee:	24 b3       	in	r18, 0x14	; 20
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPin_Direction+0x56>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPin_Direction+0x52>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	84 bb       	out	0x14, r24	; 20
 104:	08 95       	ret
 106:	21 b3       	in	r18, 0x11	; 17
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPin_Direction+0x6e>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPin_Direction+0x6a>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	81 bb       	out	0x11, r24	; 17
 11c:	08 95       	ret
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	89 f0       	breq	.+34     	; 0x144 <DIO_SetPin_Direction+0xa0>
 122:	28 f0       	brcs	.+10     	; 0x12e <DIO_SetPin_Direction+0x8a>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	c9 f0       	breq	.+50     	; 0x15a <DIO_SetPin_Direction+0xb6>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	11 f1       	breq	.+68     	; 0x170 <DIO_SetPin_Direction+0xcc>
 12c:	08 95       	ret
 12e:	2a b3       	in	r18, 0x1a	; 26
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPin_Direction+0x96>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPin_Direction+0x92>
 13e:	82 2b       	or	r24, r18
 140:	8a bb       	out	0x1a, r24	; 26
 142:	08 95       	ret
 144:	27 b3       	in	r18, 0x17	; 23
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_SetPin_Direction+0xac>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_SetPin_Direction+0xa8>
 154:	82 2b       	or	r24, r18
 156:	87 bb       	out	0x17, r24	; 23
 158:	08 95       	ret
 15a:	24 b3       	in	r18, 0x14	; 20
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_SetPin_Direction+0xc2>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_SetPin_Direction+0xbe>
 16a:	82 2b       	or	r24, r18
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	08 95       	ret
 170:	21 b3       	in	r18, 0x11	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPin_Direction+0xd8>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPin_Direction+0xd4>
 180:	82 2b       	or	r24, r18
 182:	81 bb       	out	0x11, r24	; 17
 184:	08 95       	ret

00000186 <DIO_SetPin_Value>:
 186:	44 23       	and	r20, r20
 188:	19 f0       	breq	.+6      	; 0x190 <DIO_SetPin_Value+0xa>
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	c9 f1       	breq	.+114    	; 0x200 <DIO_SetPin_Value+0x7a>
 18e:	08 95       	ret
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	91 f0       	breq	.+36     	; 0x1b8 <DIO_SetPin_Value+0x32>
 194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_SetPin_Value+0x1a>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	d9 f0       	breq	.+54     	; 0x1d0 <DIO_SetPin_Value+0x4a>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	29 f1       	breq	.+74     	; 0x1e8 <DIO_SetPin_Value+0x62>
 19e:	08 95       	ret
 1a0:	2b b3       	in	r18, 0x1b	; 27
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_SetPin_Value+0x26>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_SetPin_Value+0x22>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	8b bb       	out	0x1b, r24	; 27
 1b6:	08 95       	ret
 1b8:	28 b3       	in	r18, 0x18	; 24
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_SetPin_Value+0x3e>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_SetPin_Value+0x3a>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	08 95       	ret
 1d0:	25 b3       	in	r18, 0x15	; 21
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPin_Value+0x56>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPin_Value+0x52>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	85 bb       	out	0x15, r24	; 21
 1e6:	08 95       	ret
 1e8:	22 b3       	in	r18, 0x12	; 18
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPin_Value+0x6e>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPin_Value+0x6a>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	82 bb       	out	0x12, r24	; 18
 1fe:	08 95       	ret
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	89 f0       	breq	.+34     	; 0x226 <DIO_SetPin_Value+0xa0>
 204:	28 f0       	brcs	.+10     	; 0x210 <DIO_SetPin_Value+0x8a>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	c9 f0       	breq	.+50     	; 0x23c <DIO_SetPin_Value+0xb6>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	11 f1       	breq	.+68     	; 0x252 <DIO_SetPin_Value+0xcc>
 20e:	08 95       	ret
 210:	2b b3       	in	r18, 0x1b	; 27
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPin_Value+0x96>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPin_Value+0x92>
 220:	82 2b       	or	r24, r18
 222:	8b bb       	out	0x1b, r24	; 27
 224:	08 95       	ret
 226:	28 b3       	in	r18, 0x18	; 24
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPin_Value+0xac>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPin_Value+0xa8>
 236:	82 2b       	or	r24, r18
 238:	88 bb       	out	0x18, r24	; 24
 23a:	08 95       	ret
 23c:	25 b3       	in	r18, 0x15	; 21
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SetPin_Value+0xc2>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SetPin_Value+0xbe>
 24c:	82 2b       	or	r24, r18
 24e:	85 bb       	out	0x15, r24	; 21
 250:	08 95       	ret
 252:	22 b3       	in	r18, 0x12	; 18
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPin_Value+0xd8>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPin_Value+0xd4>
 262:	82 2b       	or	r24, r18
 264:	82 bb       	out	0x12, r24	; 18
 266:	08 95       	ret

00000268 <DIO_ReadPin_Value>:
	}
}
Uint8t DIO_ReadPin_Value(Uint8t port, Uint8t pin)
{
	Uint8t val = 0;
	switch(port)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	79 f0       	breq	.+30     	; 0x28a <DIO_ReadPin_Value+0x22>
 26c:	28 f0       	brcs	.+10     	; 0x278 <DIO_ReadPin_Value+0x10>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	a9 f0       	breq	.+42     	; 0x29c <DIO_ReadPin_Value+0x34>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	e1 f0       	breq	.+56     	; 0x2ae <DIO_ReadPin_Value+0x46>
 276:	24 c0       	rjmp	.+72     	; 0x2c0 <DIO_ReadPin_Value+0x58>
	{
		case DIO_PORTA:
		val = GET_BIT(PINA, pin);
 278:	89 b3       	in	r24, 0x19	; 25
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_ReadPin_Value+0x1a>
 27e:	95 95       	asr	r25
 280:	87 95       	ror	r24
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_ReadPin_Value+0x16>
 286:	81 70       	andi	r24, 0x01	; 1
		break;
 288:	08 95       	ret
		case DIO_PORTB:
		val = GET_BIT(PINB, pin);
 28a:	86 b3       	in	r24, 0x16	; 22
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_ReadPin_Value+0x2c>
 290:	95 95       	asr	r25
 292:	87 95       	ror	r24
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_ReadPin_Value+0x28>
 298:	81 70       	andi	r24, 0x01	; 1
		break;
 29a:	08 95       	ret
		case DIO_PORTC:
		val = GET_BIT(PINC, pin);
 29c:	83 b3       	in	r24, 0x13	; 19
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_ReadPin_Value+0x3e>
 2a2:	95 95       	asr	r25
 2a4:	87 95       	ror	r24
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_ReadPin_Value+0x3a>
 2aa:	81 70       	andi	r24, 0x01	; 1
		break;
 2ac:	08 95       	ret
		case DIO_PORTD:
		val = GET_BIT(PIND, pin);
 2ae:	80 b3       	in	r24, 0x10	; 16
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_ReadPin_Value+0x50>
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_ReadPin_Value+0x4c>
 2bc:	81 70       	andi	r24, 0x01	; 1
		break;
 2be:	08 95       	ret
		break;
	}
}
Uint8t DIO_ReadPin_Value(Uint8t port, Uint8t pin)
{
	Uint8t val = 0;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		val = GET_BIT(PIND, pin);
		break;
	}
	return val;
}
 2c2:	08 95       	ret

000002c4 <BUTTON0_Initialize>:

#include "InOut.h"
 void BUTTON0_Initialize()
 {
	 DIO_SetPin_Direction(BUTTON0_PORT,BUTTON0,InOut_INPUT);
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
 2ce:	08 95       	ret

000002d0 <BUTTON0_Read>:
 }
 Uint8t BUTTON0_Read(void)
 {
	 return DIO_ReadPin_Value(BUTTON0_PORT,BUTTON0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 34 01 	call	0x268	; 0x268 <DIO_ReadPin_Value>
 }
 2d8:	08 95       	ret

000002da <LCD_Write_Command>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
}
void LCD_Write_Command(Uint8t command)
{
 2da:	cf 93       	push	r28
 2dc:	c8 2f       	mov	r28, r24
	/*RS is logic(0) to write inside control register*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_LOW);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	63 e0       	ldi	r22, 0x03	; 3
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	/*Send high nibble of command*/
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 2fc:	8b b3       	in	r24, 0x1b	; 27
 2fe:	9c 2f       	mov	r25, r28
 300:	90 7f       	andi	r25, 0xF0	; 240
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	89 2b       	or	r24, r25
 306:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 312:	8f e9       	ldi	r24, 0x9F	; 159
 314:	9f e0       	ldi	r25, 0x0F	; 15
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_Write_Command+0x3c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_Write_Command+0x42>
 31c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	63 e0       	ldi	r22, 0x03	; 3
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	/*send low nibble of command*/
	PORTA = (command << 4) | (PORTA & 0x0F);
 328:	20 e1       	ldi	r18, 0x10	; 16
 32a:	c2 9f       	mul	r28, r18
 32c:	c0 01       	movw	r24, r0
 32e:	11 24       	eor	r1, r1
 330:	9b b3       	in	r25, 0x1b	; 27
 332:	9f 70       	andi	r25, 0x0F	; 15
 334:	89 2b       	or	r24, r25
 336:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	63 e0       	ldi	r22, 0x03	; 3
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
 342:	8f e9       	ldi	r24, 0x9F	; 159
 344:	9f e0       	ldi	r25, 0x0F	; 15
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_Write_Command+0x6c>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_Write_Command+0x72>
 34c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
 358:	8f e3       	ldi	r24, 0x3F	; 63
 35a:	9f e1       	ldi	r25, 0x1F	; 31
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_Write_Command+0x82>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_Write_Command+0x88>
 362:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <LCD_Init>:
#include "LCD.h"

void LCD_Init(void)
{
	/*Define direction for command pins*/
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RS, LCD_OUTPUT);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RW, LCD_OUTPUT);
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_EN, LCD_OUTPUT);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	63 e0       	ldi	r22, 0x03	; 3
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
	/*Define direction for data pins*/
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN4, LCD_OUTPUT);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN5, LCD_OUTPUT);
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	65 e0       	ldi	r22, 0x05	; 5
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN6, LCD_OUTPUT);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	66 e0       	ldi	r22, 0x06	; 6
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN7, LCD_OUTPUT);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	67 e0       	ldi	r22, 0x07	; 7
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
 3ae:	2f ef       	ldi	r18, 0xFF	; 255
 3b0:	81 ee       	ldi	r24, 0xE1	; 225
 3b2:	94 e0       	ldi	r25, 0x04	; 4
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <LCD_Init+0x4c>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <LCD_Init+0x56>
 3be:	00 00       	nop
	/*LCD controller is slower than MC speed*/
	_delay_ms(100);
	LCD_Write_Command(0x02);
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
	LCD_Write_Command(0x33);
 3c6:	83 e3       	ldi	r24, 0x33	; 51
 3c8:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
	LCD_Write_Command(0x32);
 3cc:	82 e3       	ldi	r24, 0x32	; 50
 3ce:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
	LCD_Write_Command(0x28);
 3d2:	88 e2       	ldi	r24, 0x28	; 40
 3d4:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 3d8:	8c e0       	ldi	r24, 0x0C	; 12
 3da:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
	LCD_Write_Command(0x01);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
	LCD_Write_Command(0x06);
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
 3ea:	8f e3       	ldi	r24, 0x3F	; 63
 3ec:	9c e9       	ldi	r25, 0x9C	; 156
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_Init+0x86>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_Init+0x8c>
 3f4:	00 00       	nop
 3f6:	08 95       	ret

000003f8 <LCD_Clear>:
	_delay_ms(10);
}
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
 3fe:	08 95       	ret

00000400 <LCD_Write_Character>:
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_Write_Character(Uint8t character)
{
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
	/*RS is logic(1) to write inside data register*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_HIGH);
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	63 e0       	ldi	r22, 0x03	; 3
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	/*Send high nibble of command*/
	PORTA = (character & 0xF0) | (PORTA & 0x0F);
 422:	8b b3       	in	r24, 0x1b	; 27
 424:	9c 2f       	mov	r25, r28
 426:	90 7f       	andi	r25, 0xF0	; 240
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	89 2b       	or	r24, r25
 42c:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	63 e0       	ldi	r22, 0x03	; 3
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
 438:	8f e9       	ldi	r24, 0x9F	; 159
 43a:	9f e0       	ldi	r25, 0x0F	; 15
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <LCD_Write_Character+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <LCD_Write_Character+0x42>
 442:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
	/*send low nibble of command*/
	PORTA = (character << 4) | (PORTA & 0x0F);
 44e:	20 e1       	ldi	r18, 0x10	; 16
 450:	c2 9f       	mul	r28, r18
 452:	c0 01       	movw	r24, r0
 454:	11 24       	eor	r1, r1
 456:	9b b3       	in	r25, 0x1b	; 27
 458:	9f 70       	andi	r25, 0x0F	; 15
 45a:	89 2b       	or	r24, r25
 45c:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	63 e0       	ldi	r22, 0x03	; 3
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
 468:	8f e9       	ldi	r24, 0x9F	; 159
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_Write_Character+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_Write_Character+0x72>
 472:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_SetPin_Value>
 47e:	8f e3       	ldi	r24, 0x3F	; 63
 480:	9f e1       	ldi	r25, 0x1F	; 31
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <LCD_Write_Character+0x82>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_Write_Character+0x88>
 488:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <LCD_Write_String>:
void LCD_Write_String(Uint8t* str)
{
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ec 01       	movw	r28, r24
	//LCD_Write_Command(0x82);
	while(*str != '\0')
 494:	03 c0       	rjmp	.+6      	; 0x49c <LCD_Write_String+0xe>
	{
		LCD_Write_Character(*str);
 496:	0e 94 00 02 	call	0x400	; 0x400 <LCD_Write_Character>
		str++;
 49a:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(2);
}
void LCD_Write_String(Uint8t* str)
{
	//LCD_Write_Command(0x82);
	while(*str != '\0')
 49c:	88 81       	ld	r24, Y
 49e:	81 11       	cpse	r24, r1
 4a0:	fa cf       	rjmp	.-12     	; 0x496 <LCD_Write_String+0x8>
	{
		LCD_Write_Character(*str);
		str++;
	}
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <LCD_Write_Number>:
void LCD_Write_Number(Uint32t number)
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	2a 97       	sbiw	r28, 0x0a	; 10
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
	Uint8t num[10];
	ltoa(number, (Uint8t*)num, 10);
 4bc:	2a e0       	ldi	r18, 0x0A	; 10
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	ae 01       	movw	r20, r28
 4c2:	4f 5f       	subi	r20, 0xFF	; 255
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	0e 94 14 04 	call	0x828	; 0x828 <ltoa>
	LCD_Write_String(num);
 4ca:	ce 01       	movw	r24, r28
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
}
 4d2:	2a 96       	adiw	r28, 0x0a	; 10
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	cd bf       	out	0x3d, r28	; 61
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <LED0_Initialize>:

void LED0_Initialize(void)
{
	//SET_BIT(DDRC, PC2);//Define direction
	//DIO_SetDirection(18, DIO_PIN_OUTPUT);
	DIO_SetPin_Direction(LED0_PORT, LED0_PIN, LED_OUTPUT);//Define direction
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_SetPin_Direction>
 4ee:	08 95       	ret

000004f0 <main>:
Uint8t uart_rev =0 ;
Uint8t butt_data = 0;
Uint16t spi_data =0;
int main(void)
{
	LCD_Init();
 4f0:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_Init>
	while (1)
	{
		switch(state_machine)
 4f4:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <state_machine>
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	e9 30       	cpi	r30, 0x09	; 9
 4fc:	f1 05       	cpc	r31, r1
 4fe:	d0 f7       	brcc	.-12     	; 0x4f4 <main+0x4>
 500:	e6 5d       	subi	r30, 0xD6	; 214
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__tablejump2__>
		{
			case 0:
			LCD_Clear();
 508:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 50c:	80 e6       	ldi	r24, 0x60	; 96
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LCD_Write_Number(state_machine);
 514:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 522:	80 ec       	ldi	r24, 0xC0	; 192
 524:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Starting");
 528:	86 e6       	ldi	r24, 0x66	; 102
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			state_machine =1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
 536:	2f ef       	ldi	r18, 0xFF	; 255
 538:	87 ea       	ldi	r24, 0xA7	; 167
 53a:	91 e6       	ldi	r25, 0x61	; 97
 53c:	21 50       	subi	r18, 0x01	; 1
 53e:	80 40       	sbci	r24, 0x00	; 0
 540:	90 40       	sbci	r25, 0x00	; 0
 542:	e1 f7       	brne	.-8      	; 0x53c <main+0x4c>
 544:	00 c0       	rjmp	.+0      	; 0x546 <main+0x56>
 546:	00 00       	nop
 548:	d5 cf       	rjmp	.-86     	; 0x4f4 <main+0x4>
			_delay_ms(2000);
			break;
			case 1:
			LCD_Clear();
 54a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State")
 54e:	80 e6       	ldi	r24, 0x60	; 96
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			;LCD_Write_Number(state_machine);
 556:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"LED0_Initializ");
 56a:	8f e6       	ldi	r24, 0x6F	; 111
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LED0_Initialize();
 572:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LED0_Initialize>
			state_machine = 2;
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	89 e6       	ldi	r24, 0x69	; 105
 580:	98 e1       	ldi	r25, 0x18	; 24
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0x92>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x9c>
 58c:	00 00       	nop
 58e:	b2 cf       	rjmp	.-156    	; 0x4f4 <main+0x4>
			_delay_ms(500);
			break;
			case 2:
			LCD_Clear();
 590:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 594:	80 e6       	ldi	r24, 0x60	; 96
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LCD_Write_Number(state_machine);
 59c:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 5aa:	80 ec       	ldi	r24, 0xC0	; 192
 5ac:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"USART_Inialization");
 5b0:	8e e7       	ldi	r24, 0x7E	; 126
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			UART_Init();
 5b8:	0e 94 00 04 	call	0x800	; 0x800 <UART_Init>
			sei();
 5bc:	78 94       	sei
			state_machine = 3;
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
 5c4:	2f ef       	ldi	r18, 0xFF	; 255
 5c6:	89 e6       	ldi	r24, 0x69	; 105
 5c8:	98 e1       	ldi	r25, 0x18	; 24
 5ca:	21 50       	subi	r18, 0x01	; 1
 5cc:	80 40       	sbci	r24, 0x00	; 0
 5ce:	90 40       	sbci	r25, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <main+0xda>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <main+0xe4>
 5d4:	00 00       	nop
 5d6:	8e cf       	rjmp	.-228    	; 0x4f4 <main+0x4>
			_delay_ms(500);
			break;
			
			case 3:
			LCD_Clear();
 5d8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 5dc:	80 e6       	ldi	r24, 0x60	; 96
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LCD_Write_Number(state_machine);
 5e4:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 5f2:	80 ec       	ldi	r24, 0xC0	; 192
 5f4:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Button_Inialization");
 5f8:	81 e9       	ldi	r24, 0x91	; 145
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			BUTTON0_Initialize();
 600:	0e 94 62 01 	call	0x2c4	; 0x2c4 <BUTTON0_Initialize>
			state_machine = 4;
 604:	84 e0       	ldi	r24, 0x04	; 4
 606:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
 60a:	2f ef       	ldi	r18, 0xFF	; 255
 60c:	89 e6       	ldi	r24, 0x69	; 105
 60e:	98 e1       	ldi	r25, 0x18	; 24
 610:	21 50       	subi	r18, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <main+0x120>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x12a>
 61a:	00 00       	nop
 61c:	6b cf       	rjmp	.-298    	; 0x4f4 <main+0x4>
			_delay_ms(500);
			break;
			
			case 4:
			LCD_Clear();
 61e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 622:	80 e6       	ldi	r24, 0x60	; 96
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LCD_Write_Number(state_machine);
 62a:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 638:	80 ec       	ldi	r24, 0xC0	; 192
 63a:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"button waiting");
 63e:	85 ea       	ldi	r24, 0xA5	; 165
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			if(BUTTON0_Read()==1)
 646:	0e 94 68 01 	call	0x2d0	; 0x2d0 <BUTTON0_Read>
 64a:	81 30       	cpi	r24, 0x01	; 1
 64c:	59 f4       	brne	.+22     	; 0x664 <main+0x174>
			{
				while(BUTTON0_Read()==1);
 64e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <BUTTON0_Read>
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	e1 f3       	breq	.-8      	; 0x64e <main+0x15e>
				state_machine = 5;
 656:	85 e0       	ldi	r24, 0x05	; 5
 658:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
				butt_data = 1;
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <butt_data>
 662:	11 c0       	rjmp	.+34     	; 0x686 <main+0x196>
			}
			else if(uart_rev!=0){
 664:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <uart_rev>
 668:	88 23       	and	r24, r24
 66a:	21 f0       	breq	.+8      	; 0x674 <main+0x184>
				state_machine =5;
 66c:	85 e0       	ldi	r24, 0x05	; 5
 66e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
 672:	09 c0       	rjmp	.+18     	; 0x686 <main+0x196>
			}
			else if(spi_data!=0){
 674:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <__data_end>
 678:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <__data_end+0x1>
 67c:	89 2b       	or	r24, r25
 67e:	19 f0       	breq	.+6      	; 0x686 <main+0x196>
				state_machine =5;
 680:	85 e0       	ldi	r24, 0x05	; 5
 682:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
 686:	2f ef       	ldi	r18, 0xFF	; 255
 688:	80 e7       	ldi	r24, 0x70	; 112
 68a:	92 e0       	ldi	r25, 0x02	; 2
 68c:	21 50       	subi	r18, 0x01	; 1
 68e:	80 40       	sbci	r24, 0x00	; 0
 690:	90 40       	sbci	r25, 0x00	; 0
 692:	e1 f7       	brne	.-8      	; 0x68c <main+0x19c>
 694:	00 c0       	rjmp	.+0      	; 0x696 <main+0x1a6>
 696:	00 00       	nop
 698:	2d cf       	rjmp	.-422    	; 0x4f4 <main+0x4>
			}
			_delay_ms(50);
			
			break;
			case 5:
			LCD_Clear();
 69a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 69e:	80 e6       	ldi	r24, 0x60	; 96
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LCD_Write_Number(state_machine);
 6a6:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 6b4:	80 ec       	ldi	r24, 0xC0	; 192
 6b6:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Recieve data");
 6ba:	84 eb       	ldi	r24, 0xB4	; 180
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			if(uart_rev!=0||butt_data!=0||spi_data!=0)
 6c2:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <uart_rev>
 6c6:	81 11       	cpse	r24, r1
 6c8:	0b c0       	rjmp	.+22     	; 0x6e0 <main+0x1f0>
 6ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <butt_data>
 6ce:	81 11       	cpse	r24, r1
 6d0:	07 c0       	rjmp	.+14     	; 0x6e0 <main+0x1f0>
 6d2:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <__data_end>
 6d6:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <__data_end+0x1>
 6da:	89 2b       	or	r24, r25
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <main+0x1f0>
 6de:	0a cf       	rjmp	.-492    	; 0x4f4 <main+0x4>
			state_machine = 6;
 6e0:	86 e0       	ldi	r24, 0x06	; 6
 6e2:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
 6e6:	06 cf       	rjmp	.-500    	; 0x4f4 <main+0x4>
			break;
			
			case 6:
			LCD_Clear();
 6e8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 6ec:	80 e6       	ldi	r24, 0x60	; 96
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LCD_Write_Number(state_machine);
 6f4:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 702:	80 ec       	ldi	r24, 0xC0	; 192
 704:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Spi_intialize");
 708:	81 ec       	ldi	r24, 0xC1	; 193
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			SPI_Init();
 710:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <SPI_Init>
			state_machine = 7;
 714:	87 e0       	ldi	r24, 0x07	; 7
 716:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
			break;
 71a:	ec ce       	rjmp	.-552    	; 0x4f4 <main+0x4>

			case 7:
			LCD_Clear();
 71c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 720:	80 e6       	ldi	r24, 0x60	; 96
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LCD_Write_Number(state_machine);
 728:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 736:	80 ec       	ldi	r24, 0xC0	; 192
 738:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Spi_transmit");
 73c:	8f ec       	ldi	r24, 0xCF	; 207
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			if(uart_rev!=0)
 744:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <uart_rev>
 748:	88 23       	and	r24, r24
 74a:	19 f0       	breq	.+6      	; 0x752 <main+0x262>
			{
				SPI_Transmit(uart_rev);
 74c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_Transmit>
 750:	05 c0       	rjmp	.+10     	; 0x75c <main+0x26c>
			}
			else if(butt_data!=0)
 752:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <butt_data>
 756:	81 11       	cpse	r24, r1
			{
				SPI_Transmit(butt_data);
 758:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_Transmit>
			}
			
			state_machine = 8;
 75c:	88 e0       	ldi	r24, 0x08	; 8
 75e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
			
			break;
 762:	c8 ce       	rjmp	.-624    	; 0x4f4 <main+0x4>
			case 8:
			LCD_Clear();
 764:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 768:	80 e6       	ldi	r24, 0x60	; 96
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
			LCD_Write_Number(state_machine);
 770:	60 91 ea 00 	lds	r22, 0x00EA	; 0x8000ea <state_machine>
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 77e:	80 ec       	ldi	r24, 0xC0	; 192
 780:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"New_Start");
 784:	8c ed       	ldi	r24, 0xDC	; 220
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Write_String>
 78c:	2f ef       	ldi	r18, 0xFF	; 255
 78e:	89 e6       	ldi	r24, 0x69	; 105
 790:	98 e1       	ldi	r25, 0x18	; 24
 792:	21 50       	subi	r18, 0x01	; 1
 794:	80 40       	sbci	r24, 0x00	; 0
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	e1 f7       	brne	.-8      	; 0x792 <main+0x2a2>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <main+0x2ac>
 79c:	00 00       	nop
			_delay_ms(500);
			uart_rev =0;
 79e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <uart_rev>
			butt_data =0;
 7a2:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <butt_data>
			spi_data =0;
 7a6:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <__data_end+0x1>
 7aa:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <__data_end>
			state_machine = 4;
 7ae:	84 e0       	ldi	r24, 0x04	; 4
 7b0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <state_machine>
			break;
 7b4:	9f ce       	rjmp	.-706    	; 0x4f4 <main+0x4>

000007b6 <__vector_13>:
		}
	}
	
}
ISR(USART_RXC_vect)
{
 7b6:	1f 92       	push	r1
 7b8:	0f 92       	push	r0
 7ba:	0f b6       	in	r0, 0x3f	; 63
 7bc:	0f 92       	push	r0
 7be:	11 24       	eor	r1, r1
 7c0:	8f 93       	push	r24
	uart_rev = UDR;
 7c2:	8c b1       	in	r24, 0x0c	; 12
 7c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <uart_rev>
}
 7c8:	8f 91       	pop	r24
 7ca:	0f 90       	pop	r0
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	0f 90       	pop	r0
 7d0:	1f 90       	pop	r1
 7d2:	18 95       	reti

000007d4 <SPI_Init>:
#include "SPI.h"

void SPI_Init(void)
{
	#if SPI_MODE == MASTER
	SET_BIT(SPI_PORT, MOSI);/*Define direction as output*/
 7d4:	87 b3       	in	r24, 0x17	; 23
 7d6:	80 62       	ori	r24, 0x20	; 32
 7d8:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(SPI_PORT, MISO);/*Define direction as input*/
 7da:	87 b3       	in	r24, 0x17	; 23
 7dc:	8f 7b       	andi	r24, 0xBF	; 191
 7de:	87 bb       	out	0x17, r24	; 23
	SET_BIT(SPI_PORT, CLK);/*Define direction as output*/
 7e0:	87 b3       	in	r24, 0x17	; 23
 7e2:	80 68       	ori	r24, 0x80	; 128
 7e4:	87 bb       	out	0x17, r24	; 23
	SET_BIT(SPI_PORT, SS); /*Define direction as output*/
 7e6:	87 b3       	in	r24, 0x17	; 23
 7e8:	80 61       	ori	r24, 0x10	; 16
 7ea:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(SPSR, SPI2X);
 7ec:	8e b1       	in	r24, 0x0e	; 14
 7ee:	8e 7f       	andi	r24, 0xFE	; 254
 7f0:	8e b9       	out	0x0e, r24	; 14
	//SET_BIT(SPCR, SPR1);SET_BIT(SPCR, SPR0);
	SPCR = 0x53;//0b 0101 0011
 7f2:	83 e5       	ldi	r24, 0x53	; 83
 7f4:	8d b9       	out	0x0d, r24	; 13
 7f6:	08 95       	ret

000007f8 <SPI_Transmit>:
	SPCR = 0x43;//0b 0100 0011
	#endif
}
void SPI_Transmit(Uint8t data)
{
	SPDR = data;
 7f8:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
 7fa:	77 9b       	sbis	0x0e, 7	; 14
 7fc:	fe cf       	rjmp	.-4      	; 0x7fa <SPI_Transmit+0x2>
}
 7fe:	08 95       	ret

00000800 <UART_Init>:

void UART_Init(void)
{
	
	/*Define Direction of Tx*/
	SET_BIT(DDRD, PD1);
 800:	81 b3       	in	r24, 0x11	; 17
 802:	82 60       	ori	r24, 0x02	; 2
 804:	81 bb       	out	0x11, r24	; 17
	/*Define Direction of Rx*/
	CLR_BIT(DDRD, PD0);
 806:	81 b3       	in	r24, 0x11	; 17
 808:	8e 7f       	andi	r24, 0xFE	; 254
 80a:	81 bb       	out	0x11, r24	; 17
	/*Baud rate value variable*/
	Uint16t UBRR_Val = 0;
	/*Enable Transmitter and Receiver bits*/
	UCSRB = (1 << RXEN) | (1 << TXEN)| (1<<RXCIE);
 80c:	88 e9       	ldi	r24, 0x98	; 152
 80e:	8a b9       	out	0x0a, r24	; 10
	/*Full configuration for UART*/
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 810:	86 e8       	ldi	r24, 0x86	; 134
 812:	80 bd       	out	0x20, r24	; 32
	/*Baud Rate Calculations*/
	UBRR_Val = (((FRQ) / (16 * BAUDRATE)) - 1);// 11110101 00111001
	UBRRL = UBRR_Val;//00111001
 814:	87 e6       	ldi	r24, 0x67	; 103
 816:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Val >> 8;//11110101
 818:	10 bc       	out	0x20, r1	; 32
 81a:	08 95       	ret

0000081c <__tablejump2__>:
 81c:	ee 0f       	add	r30, r30
 81e:	ff 1f       	adc	r31, r31
 820:	05 90       	lpm	r0, Z+
 822:	f4 91       	lpm	r31, Z
 824:	e0 2d       	mov	r30, r0
 826:	09 94       	ijmp

00000828 <ltoa>:
 828:	25 32       	cpi	r18, 0x25	; 37
 82a:	31 05       	cpc	r19, r1
 82c:	20 f4       	brcc	.+8      	; 0x836 <ltoa+0xe>
 82e:	22 30       	cpi	r18, 0x02	; 2
 830:	10 f0       	brcs	.+4      	; 0x836 <ltoa+0xe>
 832:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__ltoa_ncheck>
 836:	fa 01       	movw	r30, r20
 838:	10 82       	st	Z, r1
 83a:	ca 01       	movw	r24, r20
 83c:	08 95       	ret

0000083e <__ltoa_ncheck>:
 83e:	bb 27       	eor	r27, r27
 840:	2a 30       	cpi	r18, 0x0A	; 10
 842:	51 f4       	brne	.+20     	; 0x858 <__ltoa_ncheck+0x1a>
 844:	99 23       	and	r25, r25
 846:	42 f4       	brpl	.+16     	; 0x858 <__ltoa_ncheck+0x1a>
 848:	bd e2       	ldi	r27, 0x2D	; 45
 84a:	90 95       	com	r25
 84c:	80 95       	com	r24
 84e:	70 95       	com	r23
 850:	61 95       	neg	r22
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	8f 4f       	sbci	r24, 0xFF	; 255
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__ultoa_common>

0000085c <__ultoa_ncheck>:
 85c:	bb 27       	eor	r27, r27

0000085e <__ultoa_common>:
 85e:	fa 01       	movw	r30, r20
 860:	a6 2f       	mov	r26, r22
 862:	62 17       	cp	r22, r18
 864:	71 05       	cpc	r23, r1
 866:	81 05       	cpc	r24, r1
 868:	91 05       	cpc	r25, r1
 86a:	33 0b       	sbc	r19, r19
 86c:	30 fb       	bst	r19, 0
 86e:	66 f0       	brts	.+24     	; 0x888 <__stack+0x29>
 870:	aa 27       	eor	r26, r26
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	aa 1f       	adc	r26, r26
 87c:	a2 17       	cp	r26, r18
 87e:	10 f0       	brcs	.+4      	; 0x884 <__stack+0x25>
 880:	a2 1b       	sub	r26, r18
 882:	63 95       	inc	r22
 884:	38 50       	subi	r19, 0x08	; 8
 886:	a9 f7       	brne	.-22     	; 0x872 <__stack+0x13>
 888:	a0 5d       	subi	r26, 0xD0	; 208
 88a:	aa 33       	cpi	r26, 0x3A	; 58
 88c:	08 f0       	brcs	.+2      	; 0x890 <__stack+0x31>
 88e:	a9 5d       	subi	r26, 0xD9	; 217
 890:	a1 93       	st	Z+, r26
 892:	36 f7       	brtc	.-52     	; 0x860 <__stack+0x1>
 894:	b1 11       	cpse	r27, r1
 896:	b1 93       	st	Z+, r27
 898:	10 82       	st	Z, r1
 89a:	ca 01       	movw	r24, r20
 89c:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <strrev>

000008a0 <strrev>:
 8a0:	dc 01       	movw	r26, r24
 8a2:	fc 01       	movw	r30, r24
 8a4:	67 2f       	mov	r22, r23
 8a6:	71 91       	ld	r23, Z+
 8a8:	77 23       	and	r23, r23
 8aa:	e1 f7       	brne	.-8      	; 0x8a4 <strrev+0x4>
 8ac:	32 97       	sbiw	r30, 0x02	; 2
 8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <strrev+0x18>
 8b0:	7c 91       	ld	r23, X
 8b2:	6d 93       	st	X+, r22
 8b4:	70 83       	st	Z, r23
 8b6:	62 91       	ld	r22, -Z
 8b8:	ae 17       	cp	r26, r30
 8ba:	bf 07       	cpc	r27, r31
 8bc:	c8 f3       	brcs	.-14     	; 0x8b0 <strrev+0x10>
 8be:	08 95       	ret

000008c0 <_exit>:
 8c0:	f8 94       	cli

000008c2 <__stop_program>:
 8c2:	ff cf       	rjmp	.-2      	; 0x8c2 <__stop_program>
