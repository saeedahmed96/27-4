
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000007d2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a8  008000a8  000008ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bc9  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a87  00000000  00000000  000026b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5a  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00004098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a7  00000000  00000000  000043cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f46  00000000  00000000  00004a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000059b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3a       	cpi	r26, 0xA9	; 169
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  8a:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Direction>:
	return val;
}

void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)
{
	switch(direction)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPin_Direction+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	c9 f1       	breq	.+114    	; 0x10c <DIO_SetPin_Direction+0x7a>
  9a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch (port)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_SetPin_Direction+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPin_Direction+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_SetPin_Direction+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_SetPin_Direction+0x62>
  aa:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPin_Direction+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPin_Direction+0x22>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
			break;
  c2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPin_Direction+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPin_Direction+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
			break;
  da:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Direction+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Direction+0x52>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
			break;
  f2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPin_Direction+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPin_Direction+0x6a>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
			break;
 10a:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch (port)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	89 f0       	breq	.+34     	; 0x132 <DIO_SetPin_Direction+0xa0>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_SetPin_Direction+0x8a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c9 f0       	breq	.+50     	; 0x148 <DIO_SetPin_Direction+0xb6>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <DIO_SetPin_Direction+0xcc>
 11a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0x92>
 12c:	82 2b       	or	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
			break;
 130:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xa8>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
			break;
 146:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
			break;
 15c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPin_Direction+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPin_Direction+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t state)
{
	switch(state)
 174:	44 23       	and	r20, r20
 176:	19 f0       	breq	.+6      	; 0x17e <DIO_SetPin_Value+0xa>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	c9 f1       	breq	.+114    	; 0x1ee <DIO_SetPin_Value+0x7a>
 17c:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 f0       	breq	.+36     	; 0x1a6 <DIO_SetPin_Value+0x32>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPin_Value+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	d9 f0       	breq	.+54     	; 0x1be <DIO_SetPin_Value+0x4a>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_SetPin_Value+0x62>
 18c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPin_Value+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPin_Value+0x22>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
			break;
 1a4:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPin_Value+0x3e>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPin_Value+0x3a>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
			break;
 1bc:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPin_Value+0x56>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPin_Value+0x52>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	85 bb       	out	0x15, r24	; 21
			break;
 1d4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1d6:	22 b3       	in	r18, 0x12	; 18
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPin_Value+0x6e>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPin_Value+0x6a>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	82 bb       	out	0x12, r24	; 18
			break;
 1ec:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch (port)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f0       	breq	.+34     	; 0x214 <DIO_SetPin_Value+0xa0>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_SetPin_Value+0x8a>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c9 f0       	breq	.+50     	; 0x22a <DIO_SetPin_Value+0xb6>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	11 f1       	breq	.+68     	; 0x240 <DIO_SetPin_Value+0xcc>
 1fc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_Value+0x96>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_Value+0x92>
 20e:	82 2b       	or	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
			break;
 212:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_Value+0xac>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_Value+0xa8>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
			break;
 228:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPin_Value+0xc2>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPin_Value+0xbe>
 23a:	82 2b       	or	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
			break;
 23e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPin_Value+0xd8>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPin_Value+0xd4>
 250:	82 2b       	or	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <DIO_TogglePin_Value>:
		break;
	}
}
void DIO_TogglePin_Value(Uint8t port, Uint8t pin)
{
	switch(port)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	89 f0       	breq	.+34     	; 0x27c <DIO_TogglePin_Value+0x26>
 25a:	28 f0       	brcs	.+10     	; 0x266 <DIO_TogglePin_Value+0x10>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	c9 f0       	breq	.+50     	; 0x292 <DIO_TogglePin_Value+0x3c>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	11 f1       	breq	.+68     	; 0x2a8 <DIO_TogglePin_Value+0x52>
 264:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
 266:	2b b3       	in	r18, 0x1b	; 27
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_TogglePin_Value+0x1c>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_TogglePin_Value+0x18>
 276:	82 27       	eor	r24, r18
 278:	8b bb       	out	0x1b, r24	; 27
		break;
 27a:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
 27c:	28 b3       	in	r18, 0x18	; 24
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_TogglePin_Value+0x32>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_TogglePin_Value+0x2e>
 28c:	82 27       	eor	r24, r18
 28e:	88 bb       	out	0x18, r24	; 24
		break;
 290:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
 292:	25 b3       	in	r18, 0x15	; 21
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_TogglePin_Value+0x48>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_TogglePin_Value+0x44>
 2a2:	82 27       	eor	r24, r18
 2a4:	85 bb       	out	0x15, r24	; 21
		break;
 2a6:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 2a8:	22 b3       	in	r18, 0x12	; 18
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_TogglePin_Value+0x5e>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_TogglePin_Value+0x5a>
 2b8:	82 27       	eor	r24, r18
 2ba:	82 bb       	out	0x12, r24	; 18
 2bc:	08 95       	ret

000002be <LCD_Write_Command>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
}
void LCD_Write_Command(Uint8t command)
{
 2be:	cf 93       	push	r28
 2c0:	c8 2f       	mov	r28, r24
	/*RS is logic(0) to write inside control register*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*Send high nibble of command*/
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 2e0:	8b b3       	in	r24, 0x1b	; 27
 2e2:	9c 2f       	mov	r25, r28
 2e4:	90 7f       	andi	r25, 0xF0	; 240
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	89 2b       	or	r24, r25
 2ea:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_Write_Command+0x3c>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_Write_Command+0x42>
 300:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*send low nibble of command*/
	PORTA = (command << 4) | (PORTA & 0x0F);
 30c:	20 e1       	ldi	r18, 0x10	; 16
 30e:	c2 9f       	mul	r28, r18
 310:	c0 01       	movw	r24, r0
 312:	11 24       	eor	r1, r1
 314:	9b b3       	in	r25, 0x1b	; 27
 316:	9f 70       	andi	r25, 0x0F	; 15
 318:	89 2b       	or	r24, r25
 31a:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 326:	8f e9       	ldi	r24, 0x9F	; 159
 328:	9f e0       	ldi	r25, 0x0F	; 15
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_Write_Command+0x6c>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_Write_Command+0x72>
 330:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	63 e0       	ldi	r22, 0x03	; 3
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 33c:	8f e3       	ldi	r24, 0x3F	; 63
 33e:	9f e1       	ldi	r25, 0x1F	; 31
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_Write_Command+0x82>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_Write_Command+0x88>
 346:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <LCD_Init>:
#include "LCD.h"

void LCD_Init(void)
{
	/*Define direction for command pins*/
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RS, LCD_OUTPUT);
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_RW, LCD_OUTPUT);
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CNTRL_PORT, LCD_EN, LCD_OUTPUT);
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	63 e0       	ldi	r22, 0x03	; 3
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	/*Define direction for data pins*/
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN4, LCD_OUTPUT);
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	64 e0       	ldi	r22, 0x04	; 4
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN5, LCD_OUTPUT);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	65 e0       	ldi	r22, 0x05	; 5
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN6, LCD_OUTPUT);
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	66 e0       	ldi	r22, 0x06	; 6
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PORT, LCD_PIN7, LCD_OUTPUT);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	67 e0       	ldi	r22, 0x07	; 7
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	81 ee       	ldi	r24, 0xE1	; 225
 396:	94 e0       	ldi	r25, 0x04	; 4
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <LCD_Init+0x4c>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_Init+0x56>
 3a2:	00 00       	nop
	/*LCD controller is slower than MC speed*/
	_delay_ms(100);
	LCD_Write_Command(0x02);
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
	LCD_Write_Command(0x33);
 3aa:	83 e3       	ldi	r24, 0x33	; 51
 3ac:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
	LCD_Write_Command(0x32);
 3b0:	82 e3       	ldi	r24, 0x32	; 50
 3b2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
	LCD_Write_Command(0x28);
 3b6:	88 e2       	ldi	r24, 0x28	; 40
 3b8:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 3bc:	8c e0       	ldi	r24, 0x0C	; 12
 3be:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
	LCD_Write_Command(0x01);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
	LCD_Write_Command(0x06);
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
 3ce:	8f e3       	ldi	r24, 0x3F	; 63
 3d0:	9c e9       	ldi	r25, 0x9C	; 156
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_Init+0x86>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_Init+0x8c>
 3d8:	00 00       	nop
 3da:	08 95       	ret

000003dc <LCD_Clear>:
	_delay_ms(10);
}
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
 3e2:	08 95       	ret

000003e4 <LCD_Write_Character>:
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_Write_Character(Uint8t character)
{
 3e4:	cf 93       	push	r28
 3e6:	c8 2f       	mov	r28, r24
	/*RS is logic(1) to write inside data register*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RS, LCD_HIGH);
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*RW is logic(0) to write on LCD*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_RW, LCD_LOW);
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*To be sure of enable state before start operation*/
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*Send high nibble of command*/
	PORTA = (character & 0xF0) | (PORTA & 0x0F);
 406:	8b b3       	in	r24, 0x1b	; 27
 408:	9c 2f       	mov	r25, r28
 40a:	90 7f       	andi	r25, 0xF0	; 240
 40c:	8f 70       	andi	r24, 0x0F	; 15
 40e:	89 2b       	or	r24, r25
 410:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 41c:	8f e9       	ldi	r24, 0x9F	; 159
 41e:	9f e0       	ldi	r25, 0x0F	; 15
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 426:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*send low nibble of command*/
	PORTA = (character << 4) | (PORTA & 0x0F);
 432:	20 e1       	ldi	r18, 0x10	; 16
 434:	c2 9f       	mul	r28, r18
 436:	c0 01       	movw	r24, r0
 438:	11 24       	eor	r1, r1
 43a:	9b b3       	in	r25, 0x1b	; 27
 43c:	9f 70       	andi	r25, 0x0F	; 15
 43e:	89 2b       	or	r24, r25
 440:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_HIGH);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	63 e0       	ldi	r22, 0x03	; 3
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 44c:	8f e9       	ldi	r24, 0x9F	; 159
 44e:	9f e0       	ldi	r25, 0x0F	; 15
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 456:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CNTRL_PORT, LCD_EN, LCD_LOW);
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 462:	8f e3       	ldi	r24, 0x3F	; 63
 464:	9f e1       	ldi	r25, 0x1F	; 31
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <LCD_Write_String>:
void LCD_Write_String(Uint8t* str)
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ec 01       	movw	r28, r24
	//LCD_Write_Command(0x82);
	while(*str != '\0')
 478:	03 c0       	rjmp	.+6      	; 0x480 <LCD_Write_String+0xe>
	{
		LCD_Write_Character(*str);
 47a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_Write_Character>
		str++;
 47e:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(2);
}
void LCD_Write_String(Uint8t* str)
{
	//LCD_Write_Command(0x82);
	while(*str != '\0')
 480:	88 81       	ld	r24, Y
 482:	81 11       	cpse	r24, r1
 484:	fa cf       	rjmp	.-12     	; 0x47a <LCD_Write_String+0x8>
	{
		LCD_Write_Character(*str);
		str++;
	}
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <LCD_Write_Number>:
void LCD_Write_Number(Uint32t number)
{
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	2a 97       	sbiw	r28, 0x0a	; 10
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	f8 94       	cli
 49a:	de bf       	out	0x3e, r29	; 62
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	cd bf       	out	0x3d, r28	; 61
	Uint8t num[10];
	ltoa(number, (Uint8t*)num, 10);
 4a0:	2a e0       	ldi	r18, 0x0A	; 10
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	ae 01       	movw	r20, r28
 4a6:	4f 5f       	subi	r20, 0xFF	; 255
 4a8:	5f 4f       	sbci	r21, 0xFF	; 255
 4aa:	0e 94 9b 03 	call	0x736	; 0x736 <ltoa>
	LCD_Write_String(num);
 4ae:	ce 01       	movw	r24, r28
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
}
 4b6:	2a 96       	adiw	r28, 0x0a	; 10
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	f8 94       	cli
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <LED0_Initialize>:
}
void LED0_OFF(void)
{
	//CLR_BIT(LED0_PORT, LED0_PIN);
	//DIO_SetValue(18, LED_LOW);
	DIO_SetPin_Value(LED0_PORT, LED0_PIN, LED_LOW);
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	62 e0       	ldi	r22, 0x02	; 2
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 4d2:	08 95       	ret

000004d4 <LED0_TGL>:
}
void LED0_TGL(void)
{
	//TGL_BIT(LED0_PORT, LED0_PIN);
	DIO_TogglePin_Value(LED0_PORT, LED0_PIN);
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_TogglePin_Value>
 4dc:	08 95       	ret

000004de <main>:
#include "MOTOR.h"
#include "LCD.h"
Uint8t state_machine =0;
int main(void)
{
	LCD_Init();
 4de:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_Init>
	LCD_Clear();
 4e2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Clear>
	while (1)
	{
		switch (state_machine)
 4e6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <main+0x12>
 4ee:	51 c0       	rjmp	.+162    	; 0x592 <main+0xb4>
 4f0:	28 f4       	brcc	.+10     	; 0x4fc <main+0x1e>
 4f2:	88 23       	and	r24, r24
 4f4:	51 f0       	breq	.+20     	; 0x50a <main+0x2c>
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	49 f1       	breq	.+82     	; 0x54c <main+0x6e>
 4fa:	f5 cf       	rjmp	.-22     	; 0x4e6 <main+0x8>
 4fc:	83 30       	cpi	r24, 0x03	; 3
 4fe:	09 f4       	brne	.+2      	; 0x502 <main+0x24>
 500:	6c c0       	rjmp	.+216    	; 0x5da <main+0xfc>
 502:	84 30       	cpi	r24, 0x04	; 4
 504:	09 f4       	brne	.+2      	; 0x508 <main+0x2a>
 506:	8c c0       	rjmp	.+280    	; 0x620 <main+0x142>
 508:	ee cf       	rjmp	.-36     	; 0x4e6 <main+0x8>
		{
			case  0:
			LCD_Clear();
 50a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 50e:	80 e6       	ldi	r24, 0x60	; 96
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			LCD_Write_Number(state_machine);
 516:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end>
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 524:	80 ec       	ldi	r24, 0xC0	; 192
 526:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"el 3'ally");
 52a:	86 e6       	ldi	r24, 0x66	; 102
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			state_machine =1;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	87 ea       	ldi	r24, 0xA7	; 167
 53c:	91 e6       	ldi	r25, 0x61	; 97
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <main+0x60>
 546:	00 c0       	rjmp	.+0      	; 0x548 <main+0x6a>
 548:	00 00       	nop
 54a:	cd cf       	rjmp	.-102    	; 0x4e6 <main+0x8>
			_delay_ms(2000);
			break;
			
			case 1:
			LCD_Clear();
 54c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 550:	80 e6       	ldi	r24, 0x60	; 96
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			LCD_Write_Number(state_machine);
 558:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end>
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 566:	80 ec       	ldi	r24, 0xC0	; 192
 568:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"LED0_Initializ");
 56c:	80 e7       	ldi	r24, 0x70	; 112
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			LED0_Initialize();
 574:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LED0_Initialize>
			state_machine = 2;
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
 57e:	2f ef       	ldi	r18, 0xFF	; 255
 580:	89 e6       	ldi	r24, 0x69	; 105
 582:	98 e1       	ldi	r25, 0x18	; 24
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <main+0xa6>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <main+0xb0>
 58e:	00 00       	nop
 590:	aa cf       	rjmp	.-172    	; 0x4e6 <main+0x8>
			_delay_ms(500);
			break;
			case 2:
			LCD_Clear();
 592:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 596:	80 e6       	ldi	r24, 0x60	; 96
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			LCD_Write_Number(state_machine);
 59e:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end>
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 5ac:	80 ec       	ldi	r24, 0xC0	; 192
 5ae:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Motor_Initializ");
 5b2:	8f e7       	ldi	r24, 0x7F	; 127
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			Motor_Init(1);
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 41 03 	call	0x682	; 0x682 <Motor_Init>
			state_machine = 3;
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
 5c6:	2f ef       	ldi	r18, 0xFF	; 255
 5c8:	89 e6       	ldi	r24, 0x69	; 105
 5ca:	98 e1       	ldi	r25, 0x18	; 24
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0xee>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0xf8>
 5d6:	00 00       	nop
 5d8:	86 cf       	rjmp	.-244    	; 0x4e6 <main+0x8>
			_delay_ms(500);
			break;

			case 3:
			LCD_Clear();
 5da:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 5de:	80 e6       	ldi	r24, 0x60	; 96
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			LCD_Write_Number(state_machine);
 5e6:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end>
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 5f4:	80 ec       	ldi	r24, 0xC0	; 192
 5f6:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Spi_intialize");
 5fa:	8f e8       	ldi	r24, 0x8F	; 143
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			SPI_Init();
 602:	0e 94 88 03 	call	0x710	; 0x710 <SPI_Init>
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	89 e6       	ldi	r24, 0x69	; 105
 60a:	98 e1       	ldi	r25, 0x18	; 24
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	80 40       	sbci	r24, 0x00	; 0
 610:	90 40       	sbci	r25, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <main+0x12e>
 614:	00 c0       	rjmp	.+0      	; 0x616 <main+0x138>
 616:	00 00       	nop
			_delay_ms(500);
			state_machine = 4;
 618:	84 e0       	ldi	r24, 0x04	; 4
 61a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
			break;
 61e:	63 cf       	rjmp	.-314    	; 0x4e6 <main+0x8>

			case  4:
			LCD_Clear();
 620:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Clear>
			LCD_Write_String((Uint8t*)"State");
 624:	80 e6       	ldi	r24, 0x60	; 96
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			LCD_Write_Number(state_machine);
 62c:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end>
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Write_Number>
			LCD_Write_Command(0xC0);
 63a:	80 ec       	ldi	r24, 0xC0	; 192
 63c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Command>
			LCD_Write_String((Uint8t*)"Spi_resive");
 640:	8d e9       	ldi	r24, 0x9D	; 157
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 39 02 	call	0x472	; 0x472 <LCD_Write_String>
			Uint8t spi_rec =0;
			Uint8t direc =0;
 648:	c0 e0       	ldi	r28, 0x00	; 0
			while (1)
			{
				spi_rec = SPI_Receive();
 64a:	0e 94 97 03 	call	0x72e	; 0x72e <SPI_Receive>
				switch (spi_rec)
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	19 f0       	breq	.+6      	; 0x658 <main+0x17a>
 652:	81 36       	cpi	r24, 0x61	; 97
 654:	99 f0       	breq	.+38     	; 0x67c <main+0x19e>
 656:	f9 cf       	rjmp	.-14     	; 0x64a <main+0x16c>
				{
					case 1 :
					if(direc==0){
 658:	c1 11       	cpse	r28, r1
 65a:	07 c0       	rjmp	.+14     	; 0x66a <main+0x18c>
						Motor1_Enable();
 65c:	0e 94 67 03 	call	0x6ce	; 0x6ce <Motor1_Enable>
						Motor1_Direction(0);
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <Motor1_Direction>
						direc = 1;
 666:	c1 e0       	ldi	r28, 0x01	; 1
 668:	f0 cf       	rjmp	.-32     	; 0x64a <main+0x16c>
					}
					else if(direc==1) {
 66a:	c1 30       	cpi	r28, 0x01	; 1
 66c:	71 f7       	brne	.-36     	; 0x64a <main+0x16c>
						Motor1_Enable();
 66e:	0e 94 67 03 	call	0x6ce	; 0x6ce <Motor1_Enable>
						Motor1_Direction(1);
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <Motor1_Direction>
						direc = 0;
 678:	c0 e0       	ldi	r28, 0x00	; 0
 67a:	e7 cf       	rjmp	.-50     	; 0x64a <main+0x16c>
					}
					break;
					
					case 'a':
					LED0_TGL();
 67c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LED0_TGL>
					break;
 680:	e4 cf       	rjmp	.-56     	; 0x64a <main+0x16c>

00000682 <Motor_Init>:
/*Motor1 Disable*/
Motor_Status Motor1_Disable(void)
{
	SET_BIT(PORTD, PD4);/*Disable Motor*/
	return Motor_OK;
}
 682:	88 23       	and	r24, r24
 684:	19 f0       	breq	.+6      	; 0x68c <Motor_Init+0xa>
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	89 f0       	breq	.+34     	; 0x6ac <Motor_Init+0x2a>
 68a:	1f c0       	rjmp	.+62     	; 0x6ca <Motor_Init+0x48>
 68c:	41 e0       	ldi	r20, 0x01	; 1
 68e:	64 e0       	ldi	r22, 0x04	; 4
 690:	83 e0       	ldi	r24, 0x03	; 3
 692:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 696:	41 e0       	ldi	r20, 0x01	; 1
 698:	63 e0       	ldi	r22, 0x03	; 3
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 6a0:	41 e0       	ldi	r20, 0x01	; 1
 6a2:	64 e0       	ldi	r22, 0x04	; 4
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 6aa:	0f c0       	rjmp	.+30     	; 0x6ca <Motor_Init+0x48>
 6ac:	41 e0       	ldi	r20, 0x01	; 1
 6ae:	65 e0       	ldi	r22, 0x05	; 5
 6b0:	83 e0       	ldi	r24, 0x03	; 3
 6b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	65 e0       	ldi	r22, 0x05	; 5
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 6c0:	41 e0       	ldi	r20, 0x01	; 1
 6c2:	66 e0       	ldi	r22, 0x06	; 6
 6c4:	82 e0       	ldi	r24, 0x02	; 2
 6c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	08 95       	ret

000006ce <Motor1_Enable>:
 6ce:	82 b3       	in	r24, 0x12	; 18
 6d0:	80 61       	ori	r24, 0x10	; 16
 6d2:	82 bb       	out	0x12, r24	; 18
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	08 95       	ret

000006d8 <Motor1_Direction>:
/*Motor1 Direction*/
Motor_Status Motor1_Direction(Motor_Direction direction)
{
	switch (direction)
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	59 f0       	breq	.+22     	; 0x6f2 <Motor1_Direction+0x1a>
 6dc:	18 f0       	brcs	.+6      	; 0x6e4 <Motor1_Direction+0xc>
 6de:	83 30       	cpi	r24, 0x03	; 3
 6e0:	79 f0       	breq	.+30     	; 0x700 <Motor1_Direction+0x28>
 6e2:	14 c0       	rjmp	.+40     	; 0x70c <Motor1_Direction+0x34>
	{
		case Forward:
		SET_BIT(PORTC, PC3);
 6e4:	85 b3       	in	r24, 0x15	; 21
 6e6:	88 60       	ori	r24, 0x08	; 8
 6e8:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC, PC4);
 6ea:	85 b3       	in	r24, 0x15	; 21
 6ec:	8f 7e       	andi	r24, 0xEF	; 239
 6ee:	85 bb       	out	0x15, r24	; 21
		break;
 6f0:	0d c0       	rjmp	.+26     	; 0x70c <Motor1_Direction+0x34>
		case Backward:
		SET_BIT(PORTC, PC4);
 6f2:	85 b3       	in	r24, 0x15	; 21
 6f4:	80 61       	ori	r24, 0x10	; 16
 6f6:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC, PC3);
 6f8:	85 b3       	in	r24, 0x15	; 21
 6fa:	87 7f       	andi	r24, 0xF7	; 247
 6fc:	85 bb       	out	0x15, r24	; 21
		break;
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <Motor1_Direction+0x34>
		case Stop:
		CLR_BIT(PORTC, PC3);
 700:	85 b3       	in	r24, 0x15	; 21
 702:	87 7f       	andi	r24, 0xF7	; 247
 704:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC, PC4);
 706:	85 b3       	in	r24, 0x15	; 21
 708:	8f 7e       	andi	r24, 0xEF	; 239
 70a:	85 bb       	out	0x15, r24	; 21
		break;
	}
	return Motor_OK;
}
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	08 95       	ret

00000710 <SPI_Init>:
}
void SPI_Transmit(Uint8t data)
{
	SPDR = data;
	while (GET_BIT(SPSR, SPIF) != 1);
}
 710:	87 b3       	in	r24, 0x17	; 23
 712:	8f 7d       	andi	r24, 0xDF	; 223
 714:	87 bb       	out	0x17, r24	; 23
 716:	87 b3       	in	r24, 0x17	; 23
 718:	80 64       	ori	r24, 0x40	; 64
 71a:	87 bb       	out	0x17, r24	; 23
 71c:	87 b3       	in	r24, 0x17	; 23
 71e:	8f 77       	andi	r24, 0x7F	; 127
 720:	87 bb       	out	0x17, r24	; 23
 722:	87 b3       	in	r24, 0x17	; 23
 724:	8f 7e       	andi	r24, 0xEF	; 239
 726:	87 bb       	out	0x17, r24	; 23
 728:	83 e4       	ldi	r24, 0x43	; 67
 72a:	8d b9       	out	0x0d, r24	; 13
 72c:	08 95       	ret

0000072e <SPI_Receive>:
Uint8t SPI_Receive(void)
{
	while (GET_BIT(SPSR, SPIF) != 1);
 72e:	77 9b       	sbis	0x0e, 7	; 14
 730:	fe cf       	rjmp	.-4      	; 0x72e <SPI_Receive>
	return SPDR;
 732:	8f b1       	in	r24, 0x0f	; 15
}
 734:	08 95       	ret

00000736 <ltoa>:
 736:	25 32       	cpi	r18, 0x25	; 37
 738:	31 05       	cpc	r19, r1
 73a:	20 f4       	brcc	.+8      	; 0x744 <ltoa+0xe>
 73c:	22 30       	cpi	r18, 0x02	; 2
 73e:	10 f0       	brcs	.+4      	; 0x744 <ltoa+0xe>
 740:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__ltoa_ncheck>
 744:	fa 01       	movw	r30, r20
 746:	10 82       	st	Z, r1
 748:	ca 01       	movw	r24, r20
 74a:	08 95       	ret

0000074c <__ltoa_ncheck>:
 74c:	bb 27       	eor	r27, r27
 74e:	2a 30       	cpi	r18, 0x0A	; 10
 750:	51 f4       	brne	.+20     	; 0x766 <__ltoa_ncheck+0x1a>
 752:	99 23       	and	r25, r25
 754:	42 f4       	brpl	.+16     	; 0x766 <__ltoa_ncheck+0x1a>
 756:	bd e2       	ldi	r27, 0x2D	; 45
 758:	90 95       	com	r25
 75a:	80 95       	com	r24
 75c:	70 95       	com	r23
 75e:	61 95       	neg	r22
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	8f 4f       	sbci	r24, 0xFF	; 255
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__ultoa_common>

0000076a <__ultoa_ncheck>:
 76a:	bb 27       	eor	r27, r27

0000076c <__ultoa_common>:
 76c:	fa 01       	movw	r30, r20
 76e:	a6 2f       	mov	r26, r22
 770:	62 17       	cp	r22, r18
 772:	71 05       	cpc	r23, r1
 774:	81 05       	cpc	r24, r1
 776:	91 05       	cpc	r25, r1
 778:	33 0b       	sbc	r19, r19
 77a:	30 fb       	bst	r19, 0
 77c:	66 f0       	brts	.+24     	; 0x796 <__ultoa_common+0x2a>
 77e:	aa 27       	eor	r26, r26
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	aa 1f       	adc	r26, r26
 78a:	a2 17       	cp	r26, r18
 78c:	10 f0       	brcs	.+4      	; 0x792 <__ultoa_common+0x26>
 78e:	a2 1b       	sub	r26, r18
 790:	63 95       	inc	r22
 792:	38 50       	subi	r19, 0x08	; 8
 794:	a9 f7       	brne	.-22     	; 0x780 <__ultoa_common+0x14>
 796:	a0 5d       	subi	r26, 0xD0	; 208
 798:	aa 33       	cpi	r26, 0x3A	; 58
 79a:	08 f0       	brcs	.+2      	; 0x79e <__ultoa_common+0x32>
 79c:	a9 5d       	subi	r26, 0xD9	; 217
 79e:	a1 93       	st	Z+, r26
 7a0:	36 f7       	brtc	.-52     	; 0x76e <__ultoa_common+0x2>
 7a2:	b1 11       	cpse	r27, r1
 7a4:	b1 93       	st	Z+, r27
 7a6:	10 82       	st	Z, r1
 7a8:	ca 01       	movw	r24, r20
 7aa:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <strrev>

000007ae <strrev>:
 7ae:	dc 01       	movw	r26, r24
 7b0:	fc 01       	movw	r30, r24
 7b2:	67 2f       	mov	r22, r23
 7b4:	71 91       	ld	r23, Z+
 7b6:	77 23       	and	r23, r23
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <strrev+0x4>
 7ba:	32 97       	sbiw	r30, 0x02	; 2
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <strrev+0x18>
 7be:	7c 91       	ld	r23, X
 7c0:	6d 93       	st	X+, r22
 7c2:	70 83       	st	Z, r23
 7c4:	62 91       	ld	r22, -Z
 7c6:	ae 17       	cp	r26, r30
 7c8:	bf 07       	cpc	r27, r31
 7ca:	c8 f3       	brcs	.-14     	; 0x7be <strrev+0x10>
 7cc:	08 95       	ret

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
